#define RBY_MAP_POOL
    Aethermaw, Arcanclave Citadel, Astral Port, Caves Of The Basilisk, Clearing Gushes, Crescent Lake, Den Of Onis, Elensefar Courtyard, Fallenstar Lake, Hamlets, Hornshark Island, Howling Ghost Badlands, Sablestone Delta, Serpent Ford, Scarred Foothills, Silverhead Crossing, Sullas Ruins, Swamp Of Dread, The Freelands, The Walls Of Pyrennis, Thousand Stings Garrison, Tombs Of Kesorak, Weldyn Channel
#enddef

#define RBY_CLASSIC
    Caves Of The Basilisk, Den Of Onis, Fallenstar Lake, Hamlets, Sablestone Delta, Silverhead Crossing, Sullas Ruins, The Freelands, Weldyn Channel
#enddef

#define RBY_ADVENTUROUS
    Astral Port, Clearing Gushes, Crescent Lake, Elensefar Courtyard, Hornshark Island, Scarred Foothills, Serpent Ford, Swamp Of Dread, The Walls Of Pyrennis, Thousand Stings Garrison, Tombs Of Kesorak
#enddef

#define RBY_CONSERVATIVE
    Aethermaw, Arcanclave Citadel, Caves Of The Basilisk, Den Of Onis, Fallenstar Lake, Hamlets, Howling Ghost Badlands, Sablestone Delta, Silverhead Crossing, Sullas Ruins, The Freelands, Weldyn Channel
#enddef

##RBY_ADV_CON is just all maps

##Searches for the {INDEX}'th map in the specified map pool,
## if it finds it tags with {POOL} = 1, else {POOL} = 0.
##Used in prestart at lines 294-6
##
##Note: Probably this whole prestart event could be simplified if instead of
## optimizing so that they share a for loop, the Annotate event for a map pool
## would just split that string, go through the map pool and annotate each one,
## then clear the intermediate array variable.

#define ANNOTATE_MAP_ARR POOL INDEX
    {LOOKUP_INDEX {POOL}_arr name $map_pool_arr[{INDEX}].name temp}
    {IF_VAR temp equals ${POOL}_arr.length (
        [then]
            {VARIABLE map_pool_arr[{INDEX}].{POOL} 0}
        [/then]
        [else]
            {VARIABLE map_pool_arr[{INDEX}].{POOL} 1}
        [/else]
    )}
#enddef

#define YES_STRING_HEADER
"<span color='#F08888'>"
#enddef
#define NO_STRING_HEADER
"<span color='#F08888' strikethrough='true'>"
#enddef
#define YES_STRING_FOOTER
"</span>"
#enddef
#define NO_STRING_FOOTER
"</span>"
#enddef

#define INIT_CONST_STRING_ARRAYS
    {VARIABLE HEADER[0].str {NO_STRING_HEADER}}
    {VARIABLE HEADER[1].str {YES_STRING_HEADER}}
    {VARIABLE FOOTER[0].str {NO_STRING_FOOTER}}
    {VARIABLE FOOTER[1].str {YES_STRING_FOOTER}}

    {VARIABLE shuffle_possibilities[0].str "12"}
    {VARIABLE shuffle_possibilities[1].str "21"}

    {VARIABLE pm_string[0].str "- "}
    {VARIABLE pm_string[1].str "+ "}
#enddef

#define CLEAR_CONST_STRING_ARRAYS
    {CLEAR_VARIABLE (HEADER, FOOTER, shuffle_possibilities, pm_string)}
#enddef

#define REPORT_MAP_POOL_CHANGE MESSAGE
    [chat]
        speaker = $Moderator.name
        message = {MESSAGE}
    [/chat]
#enddef

#define FLIP_MAP NUM
    {VARIABLE_OP map_pool_arr[{NUM}].picked multiply -1}
    {VARIABLE_OP map_pool_arr[{NUM}].picked add 1}
    {REPORT_MAP_POOL_CHANGE $pm_string[$map_pool_arr[{NUM}].picked|].str|$map_pool_arr[{NUM}].name|}
#enddef

#define MAP_OPT NUM
    [option]
        message = $HEADER[$map_pool_arr[{NUM}].picked|].str| + $map_pool_arr[{NUM}].name| + $FOOTER[$map_pool_arr[{NUM}].picked|].str
        [command]
            {FLIP_MAP {NUM}}
            {VARIABLE pass false}
        [/command]
    [/option]
#enddef

#define POOL_OPT POOL
    [option]
        message = "RBY " {POOL}
        [command]
            {FOREACH map_pool_arr i}
                {VARIABLE map_pool_arr[$i].picked $map_pool_arr[$i].{POOL}}
            {NEXT i}
            {REPORT_MAP_POOL_CHANGE ("RBY " {POOL})}
            {VARIABLE pass false}
        [/command]
    [/option]
#enddef

### Wanted to include mal-ravanal image, however, it looked pretty complicated
### so just going to leave this out for now.

###ifver WESNOTH_VERSION >= 1.10.5
###ifhave campaigns/Eastern_Invasion/images/portraits/mal-ravanal.png

####define SPEAKER_IMAGE
###portraits/mal-ravanal.png
####enddef

####else

####define SPEAKER_IMAGE
###portraits/undead/transparent/lich.png
####enddef

####endif
####else

#define SPEAKER_IMAGE
    portraits/undead/transparent/lich.png
#enddef

#####endif

#define SPECTRE_INTRO
    [chat]
        speaker = "Note"
        message = "To play with random factions, use no mirror era. If you did you should still be a yeti."
    [/chat]

    {VARIABLE Moderator.name "narrator"}

    [message]
        speaker= narrator
        image = {SPEAKER_IMAGE}
        message = "In this place we will perform the dark ritual necessary to create a map pool."
    [/message]

    {REPORT_MAP_POOL_CHANGE "All"}
#enddef

#First scenario here is the "entry point" with the nice "random" minimap display
#It jumps immediately to the "real" rby interactive, which is the next scenario,
#and which has allow_new_game = no so that this is the only entry point.
[multiplayer]
    id = "RBY Interactive Logo " {RBY_RELEASE}
    name = "RBY Interactive " {RBY_RELEASE}
    description= _ "Negotiate a map pool for a duel."
    objectives= _ "Battle begins when both players pass with no changes."
    map_data="{~add-ons/Rushed_By_Yetis/campaigns/maps/RBY_Interactive_Logo.map}"
    allow_new_game = yes

    {RBY_INIT_SIDES}

    #disable RBY era events and warnings
    [event]
        name = preload
        [event]
            id=RBY_ERA_EVENT
            remove=yes
        [/event]
    [/event]

    [event]
        name = prestart

        {VARIABLE next_scenario ("RBY Interactive "{RBY_RELEASE})}
        {RBY_END_LEVEL}
    [/event]
[/multiplayer]

[multiplayer]
    id="RBY Interactive " {RBY_RELEASE}
    name= _ "RBY Interactive " {RBY_RELEASE}
    description= _ "Negotiate a map pool for a duel."
    objectives= _ "Battle begins when both players pass with no changes."
    map_data="{~add-ons/Rushed_By_Yetis/campaigns/maps/RBY_Interactive.map}"
    random_start_time=no
    allow_new_game=no

    {UNDERGROUND}
    {DEFAULT_MUSIC_PLAYLIST}

    {RBY_SIDE 1 RBY_Side1 red Red 0}
    [+side]
        shroud = yes
        fog = no
    [/side]
    {RBY_SIDE 2 RBY_Side2 blue Blue 0}
    [+side]
        shroud = yes
        fog = no
    [/side]
    [side]
        id=Props
        side = 3
        persistent=no
        color=green
        controller=ai
        allow_player=false
        canrecruit=no
        no_leader=yes
    [/side]

    #disable RBY era events and warnings
    [event]
        name = preload
        [event]
            id=RBY_ERA_EVENT
            remove=yes
        [/event]
    [/event]

    [event]
        name = preload
        [event]
            id=RBY_ERA_WARNING_EVENT
            remove=yes
        [/event]
    [/event]

    [event]
        name=prestart

        # Remove a bit of shroud around the center
        [remove_shroud]
            side = 1,2
            x = 7
            y = 4
            radius = 5
        [/remove_shroud]
        [remove_shroud]
            side = 1,2
            x = 8
            y = 4
            radius = 5
        [/remove_shroud]
        [remove_shroud]
            side = 1,2
            x = 9
            y = 4
            radius = 5
        [/remove_shroud]

        #Place some nice images around
        {PLACE_IMAGE "items/altar-evil.png" 8 4}
        {PLACE_IMAGE "items/coffin-closed.png" 8 6}
        {PLACE_IMAGE "items/dragonstatue.png" 5 6}
        {PLACE_IMAGE "items/dragonstatue.png~FL(horizontal)" 11 6}
        {PLACE_IMAGE "items/axe.png" 7 7}
        {PLACE_IMAGE "items/bow-crystal.png" 9 7}
        {PLACE_IMAGE "items/bones.png" 6 1}
        {PLACE_IMAGE "items/bones.png" 9 1}

        {UNIT 3 "Dark Adept" 11 2 (facing = sw)}
        {UNIT 3 "Dark Adept" 10 1 (facing = sw)}
        {UNIT 3 "Dark Adept" 7 2 (facing = se)}
        {UNIT 3 "Dark Adept" 8 1 (facing = se)}
        {UNIT 3 "Dark Adept" 7 1 (facing = se)}
        {UNIT 3 "Dark Adept" 5 2 (facing = se)}

        #This next section creates map_pool_arr, the main data structure of the scenario.
        #We will load as an array containing names of all maps, and also tag each one
        #with a flag whether it is in each particular map pool.
        #Later it will have other flags as well.
        [set_variables]
            name = map_pool_arr
            [split]
                list = {RBY_MAP_POOL}
                key = name
                separator = ,
            [/split]
        [/set_variables]
        [set_variables]
            name = Classic_arr
            [split]
                list = {RBY_CLASSIC}
                key = name
                separator = ,
            [/split]
        [/set_variables]
        [set_variables]
            name = Conservative_arr
            [split]
                list = {RBY_CONSERVATIVE}
                key = name
                separator = ,
            [/split]
        [/set_variables]
        [set_variables]
            name = Adventurous_arr
            [split]
                list = {RBY_ADVENTUROUS}
                key = name
                separator = ,
            [/split]
        [/set_variables]

        {FOREACH map_pool_arr i}
            {VARIABLE map_pool_arr[$i].picked 1}
            {ANNOTATE_MAP_ARR Classic $i}
            {ANNOTATE_MAP_ARR Adventurous $i}
            {ANNOTATE_MAP_ARR Conservative $i}
        {NEXT i}

        {CLEAR_VARIABLE (Classic_arr, Adventurous_arr, Conservative_arr)}

        #This initializes constant strings like those that define formatting tags for maps in the list,
        # the "+/-" used in the chat, and the "12/21" tags at the end when we shuffle sides.
        {INIT_CONST_STRING_ARRAYS}
    [/event]

    [event]
        name = side turn
        first_time_only = no

        [if]
            {VARIABLE_CONDITIONAL turn_number equals 1}
            {VARIABLE_CONDITIONAL side_number equals 1}
            [then]
                {SPECTRE_INTRO}
                {VARIABLE pass false}
            [/then]
        [/if]

        {IF_VAR side_number equals 3 (
            [then]
                [end_turn]
                [/end_turn]
            [/then]
            [else]
                {VARIABLE prev_pass $pass}
                {VARIABLE pass true}
                {VARIABLE continue true}

                [while]
                    {VARIABLE_CONDITIONAL continue boolean_equals true}
                    [do]
                        [message]
                            speaker = narrator
                            image = {SPEAKER_IMAGE}
                            side_for = $side_number
                            message = "Make any changes you would like."

                            [option]
                                message = "Done"
                                [command]
                                    {VARIABLE continue false}
                                    {REPORT_MAP_POOL_CHANGE "Done"}
                                [/command]
                            [/option]
                            {MAP_OPT 0}
                            {MAP_OPT 1}
                            {MAP_OPT 2}
                            {MAP_OPT 3}
                            {MAP_OPT 4}
                            {MAP_OPT 5}
                            {MAP_OPT 6}
                            {MAP_OPT 7}
                            {MAP_OPT 8}
                            {MAP_OPT 9}
                            {MAP_OPT 10}
                            {MAP_OPT 11}
                            {MAP_OPT 12}
                            {MAP_OPT 13}
                            {MAP_OPT 14}
                            {MAP_OPT 15}
                            {MAP_OPT 16}
                            {MAP_OPT 17}
                            {MAP_OPT 18}
                            {MAP_OPT 19}
                            {MAP_OPT 20}
                            {MAP_OPT 21}
                            {MAP_OPT 22}

                            [option]
                                message = "All"
                                [command]
                                    {FOREACH map_pool_arr i}
                                        {VARIABLE map_pool_arr[$i].picked 1}
                                    {NEXT i}
                                    {REPORT_MAP_POOL_CHANGE "All"}
                                    {VARIABLE pass false}
                                [/command]
                            [/option]
                            [option]
                                message = "None"
                                [command]
                                    {FOREACH map_pool_arr i}
                                        {VARIABLE map_pool_arr[$i].picked 0}
                                    {NEXT i}
                                    {REPORT_MAP_POOL_CHANGE "None"}
                                    {VARIABLE pass false}
                                [/command]
                            [/option]
                            {POOL_OPT Classic}
                            {POOL_OPT Adventurous}
                            {POOL_OPT Conservative}
                            [option]
                                message = "Add Noise"
                                [command]
                                    {VARIABLE_OP r1 rand 0..22}
                                    {VARIABLE_OP r2 rand 0..22}
                                    {VARIABLE_OP r3 rand 0..22}
                                    {FLIP_MAP $r1}
                                    {FLIP_MAP $r2}
                                    {FLIP_MAP $r3}
                                    {VARIABLE pass false}
                                [/command]
                            [/option]
                            [option]
                                message = "Done"
                                [command]
                                    {VARIABLE continue false}
                                    {REPORT_MAP_POOL_CHANGE "Done"}
                                [/command]
                            [/option]
                        [/message]
                    [/do]
                [/while]

                [if]
                    {VARIABLE_CONDITIONAL pass boolean_equals true}
                    {VARIABLE_CONDITIONAL prev_pass boolean_equals true}
                    [then]
                        [chat]
                            speaker = narrator
                            message = "end level"
                        [/chat]

                        {VARIABLE sel_ctr 0}
                        {FOREACH map_pool_arr i}
                            {IF_VAR map_pool_arr[$i].picked equals 1 (
                                [then]
                                    {VARIABLE selected[$sel_ctr].name $map_pool_arr[$i].name}
                                    {VARIABLE_OP sel_ctr add 1}
                                [/then]
                            )}
                        {NEXT i}

                        {IF_VAR sel_ctr less_than_equal_to 0 (
                            [then]
                                [chat]
                                    speaker = narrator
                                    message = "oops no maps :/"
                                [/chat]
                            [/then]
                            [else]
                                [set_variable]
                                    name = sel_str
                                    [join]
                                        variable = selected
                                        key = name
                                        separator = ", "
                                    [/join]
                                [/set_variable]
                                [chat]
                                    speaker = narrator
                                    message = "Got these maps: " + $sel_str
                                [/chat]

                                [set_variable]
                                    name=rby_set_message
                                    value=true
                                [/set_variable]

                                [set_variables]
                                    name = rby_set_info
                                    [value]
                                        val = "Interactive"
                                    [/value]
                                    [value]
                                        val = $sel_str
                                    [/value]
                                [/set_variables]

                                [lua]
                                    code = << wesnoth.set_variable("random", math.random(1, wesnoth.get_variable("selected.length"))) >>
                                [/lua]
                                {VARIABLE_OP random sub 1}

                                [lua]
                                    code = << wesnoth.set_variable("shuffle_sides", math.random(0,1)) >>
                                [/lua]

                                [set_variable]
                                    name = next_scenario
                                    value = "RBY " + $selected[$random|].name| + " " + $shuffle_possibilities[$shuffle_sides|].str|
                                [/set_variable]

                                [chat]
                                    speaker = narrator
                                    message = $next_scenario
                                [/chat]

                                [place_shroud]
                                    side=1
                                    x = 10
                                    y = 4
                                    radius = 1
                                [/place_shroud]
                                [place_shroud]
                                    side=2
                                    x = 6
                                    y = 4
                                    radius = 1
                                [/place_shroud]

                                {RBY_NO_MIRROR_GRAB_DEFAULT_ERA}
                                {RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS (type = Yeti) ()}

                                #This can be left out because it is included in RBY_Defaults anyways
                                #{QUICK_4MP_LEADERS}

                                {CLEAR_CONST_STRING_ARRAYS}
                                {CLEAR_VARIABLE (map_pool_arr, selected_arr, selected, sel_ctr, random, r1, r2, r3, shuffle_sides, i,  Moderator, sel_str, pass, prev_pass, factions)}

                                {RBY_END_LEVEL}
                            [/else]
                        )}
                    [/then]
                [/if]
            [/else]
        )}
    [/event]
[/multiplayer]
