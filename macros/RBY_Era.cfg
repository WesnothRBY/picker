#define RBY_NO_MIRROR_WARNING
    [event]
        name=prestart
        id = RBY_ERA_WARNING_EVENT

        [chat]
            speaker= _ "Warning"
            message= _ "No Mirror Era replays will be corrupted unless game will be played using one of RBY sets"
        [/chat]
        [chat]
            speaker= _ "Press"
            message= _ "/me ctrl-x to clear"
        [/chat]
    [/event]
#enddef

#define RBY_NO_MIRROR_RANDOM_SIDE
    [multiplayer_side]
        id=RBY No Mirror Random
        name= _ "Random"
        image=units/random-dice.png
        {MAGENTA_IS_THE_TEAM_COLOR}
        type=Yeti
        leader=Yeti
        random_leader=Yeti
    [/multiplayer_side]
#enddef

#Stealing some code from Doc Paterson's Hornshark Island cfg
#after this block factions.multiplayer_side[0] = drake side,
#factions.multiplayer_side[1] = knalgans side, etc.,
#and these objects will contain "recruit" and "random_leader" lists
#which we will draw unit types from.
#define RBY_NO_MIRROR_GRAB_DEFAULT_ERA
        [set_variables]
            name=factions
            [value]
                {multiplayer/factions/drakes-default.cfg}
                {multiplayer/factions/knalgans-default.cfg}
                {multiplayer/factions/loyalists-default.cfg}
                {multiplayer/factions/northerners-default.cfg}
                {multiplayer/factions/rebels-default.cfg}
                {multiplayer/factions/undead-default.cfg}
            [/value]
        [/set_variables]
#enddef

#define RBY_NO_MIRROR_GIVE_FACTION FACTION SIDE
#    {DEBUG_MSG ("Faction " + {FACTION} + " Side " + {SIDE})}
    [store_unit]
        [filter]
            side={SIDE}
        [/filter]
        kill=yes
        variable=old_leader
    [/store_unit]

    [set_recruit]
        side={SIDE}
        recruit=$factions.multiplayer_side[{FACTION}].recruit
    [/set_recruit]

#    {DEBUG_MSG ("Leader_arr from " + $factions.multiplayer_side[{FACTION}].random_leader)}

    [set_variables]
        name=leader_arr
        [split]
            list=$factions.multiplayer_side[{FACTION}].random_leader
            separator=,
            key=type
            remove_empty = yes
        [/split]
    [/set_variables]

    {IF_VAR leader_arr.length equals 0 (
        [then]
#            {DEBUG_MSG ("Abort: Leader_arr from " + $factions.multiplayer_side[{FACTION}].leader)}
            [set_variables]
                name=leader_arr
                [split]
                    list=$factions.multiplayer_side[{FACTION}].leader
                    separator=,
                    key=type
                    remove_empty = yes
                [/split]
            [/set_variables]
        [/then]
     )}


    [lua]
	code = <<  wesnoth.set_variable("leader_select", math.random(1, wesnoth.get_variable("leader_arr.length")))  >>
    [/lua]

#    {DEBUG_MSG ("Leader " + $leader_select)}


    #this line because the arrays are indexed from zero
    {VARIABLE_OP leader_select add -1}

    [unit]
        id=$old_leader.id
	type=$leader_arr[$leader_select].type
        x,y=$old_leader.x, $old_leader.y
        random_gender=yes
        canrecruit=yes
        name=$old_leader.name
        side={SIDE}
    [/unit]
    {CLEAR_VARIABLE (old_leader, leader_select, leader_arr)}
#enddef

#define RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS_EVENT
[event]
    name = prestart
    id = RBY_ERA_EVENT

    {RBY_NO_MIRROR_GRAB_DEFAULT_ERA}
    {RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS (type = Yeti) ()}
    #{CLEAR_VARIABLE factions}
[/event]
#enddef

#This code will filter for units with canrecruit = yes and matching keys in 2nd arg.
#Then it will replace units with canrecruit = yes and matching keys in 1st arg with 
#random leaders in factions which are different from these.
#It assumes factions has been loaded like in the GRAB_DEFAULT_ERA macro.
#For the "expected" previous behavior, {RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS (type = Yeti) ()}

#define RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS FILTER_REPLACE_THESE FILTER_WITHOUT_MATCHING_THESE
        [store_unit]
            [filter]
                canrecruit=yes
                {FILTER_WITHOUT_MATCHING_THESE}
            [/filter]
            variable=leaders
        [/store_unit]

        {FOREACH factions.multiplayer_side j}
            {VARIABLE factions.multiplayer_side[$j].picked no}
        {NEXT j}

        {FOREACH leaders i}
            [store_side]
                side=$leaders[$i].side
                variable=current_side
            [/store_side]
            [set_variables]
                name=current_side.recruit_array
                [split]
                    list=$current_side.recruit
                    separator=,
                    key=type
                [/split]
            [/set_variables]

            {LOOKUP_INDEX factions.multiplayer_side recruit $current_side.recruit j}
            {IF_VAR j equals $factions.multiplayer_side.length (
                 [then]
                 [/then]
                 [else] 
                     {VARIABLE factions.multiplayer_side[$j].picked yes}
                 [/else]
            )}

            #[switch]
            #    variable=current_side.recruit_array[0].type
            #    [case]
            #        value=Drake Burner
            #        {VARIABLE factions.multiplayer_side[0].picked yes}
            #    [/case]
            #    [case]
            #        value=Dwarvish Fighter
            #        {VARIABLE factions.multiplayer_side[1].picked yes}
            #    [/case]
            #    [case]
            #        value=Bowman
            #        {VARIABLE factions.multiplayer_side[2].picked yes}
            #    [/case]
            #    [case]
            #        value=Goblin Spearman
            #        {VARIABLE factions.multiplayer_side[3].picked yes}
            #    [/case]
            #    [case]
            #        value=Elvish Archer
            #        {VARIABLE factions.multiplayer_side[4].picked yes}
            #    [/case]
            #    [case]
            #        value=Dark Adept
            #        {VARIABLE factions.multiplayer_side[5].picked yes}
            #    [/case]
            #[/switch]

            {CLEAR_VARIABLE current_side}
        {NEXT i}

        [store_unit]
            [filter]
                canrecruit=yes
		{FILTER_REPLACE_THESE}
            [/filter]
            variable=random_leaders
        [/store_unit]

        {FOREACH random_leaders i}
            [store_side]
                side=$random_leaders[$i].side
                variable=current_side
            [/store_side]

            {FOREACH factions.multiplayer_side j}
                {VARIABLE factions.multiplayer_side[$j].proposed no}
            {NEXT j}

            {VARIABLE continue yes}
            {VARIABLE proposals 0}
            [while]
                {VARIABLE_CONDITIONAL continue boolean_equals yes}
                [and]
                    {VARIABLE_CONDITIONAL proposals less_than $factions.multiplayer_side.length}
                [/and]
                [do]
                    [lua]
            		code = << wesnoth.set_variable("proposed_faction", math.random(1, wesnoth.get_variable("factions.multiplayer_side.length"))) >>
        	    [/lua]
                    {VARIABLE_OP proposed_faction sub 1}
                    {IF_VAR factions.multiplayer_side[$proposed_faction].proposed boolean_equals no (
			[then]
				{VARIABLE factions.multiplayer_side[$proposed_faction].proposed yes}
				{VARIABLE_OP proposals add 1}
				{IF_VAR factions.multiplayer_side[$proposed_faction].picked boolean_equals no (
                                        [then]
                                            {VARIABLE factions.multiplayer_side[$proposed_faction].picked yes}
                                            {VARIABLE continue no}
                                            {RBY_NO_MIRROR_GIVE_FACTION $proposed_faction $random_leaders[$i].side}
                                        [/then]
				)}
                        [/then]
                     )}
                [/do]
            [/while]
            {IF_VAR continue boolean_equals yes (
                [then]
                    [lua]
            		code = << wesnoth.set_variable("proposed_faction", math.random(1, wesnoth.get_variable("factions.multiplayer_side.length"))) >>
        	    [/lua]
                    {RBY_NO_MIRROR_GIVE_FACTION $proposed_faction $random_leaders[$i].side}
                [/then]
            )}
        {NEXT i}
	{CLEAR_VARIABLE (leaders, random_leaders, continue, proposals, proposed_faction, j)}
#enddef

#define RBY_NO_ALLY_MIRROR_REDISTRIBUTE_FACTIONS_EVENT
[event]
    name = prestart
    id = RBY_ERA_EVENT

    {RBY_NO_MIRROR_GRAB_DEFAULT_ERA}
    {RBY_NO_ALLY_MIRROR_REDISTRIBUTE_FACTIONS}
    #{CLEAR_VARIABLE factions}
[/event]
#enddef

#define RBY_NO_ALLY_MIRROR_REDISTRIBUTE_FACTIONS
        [store_unit]
            [filter]
                canrecruit=yes
                type = Yeti
            [/filter]
            variable=yetis
        [/store_unit]

        [while]
            [not]
                {VARIABLE_CONDITIONAL yetis.length equals 0}
            [/not]
            [do]
                {RBY_NO_MIRROR_REDISTRIBUTE_FACTIONS (
                    type = Yeti
                    [allied_with] 
                        side = $yetis[0].side 
                    [/allied_with]
                ) ( 
                    [allied_with] 
                        side = $yetis[0].side 
                    [/allied_with]
                )}
                
                [store_unit]
                    [filter]
                        canrecruit=yes
                        type = Yeti
                    [/filter]
                    variable=yetis
                [/store_unit]
            [/do]
        [/while]

        {CLEAR_VARIABLE yetis}
#enddef

#define RBY_SLOW_7MP_LEADERS
    [event]
        name=prestart

        [store_unit]
            [filter]
                canrecruit=yes

                [filter_wml]
                    max_moves=7
                [/filter_wml]
            [/filter]

            kill=yes
            variable=leaders_to_make_slow
        [/store_unit]

        {FOREACH leaders_to_make_slow i}
            [if]
                [variable]
                    name=leaders_to_make_slow[$i].variables.dont_make_me_slow
                    boolean_equals=yes
                [/variable]

                [then]
                    [unstore_unit]
                        variable=leaders_to_make_slow[$i]
                    [/unstore_unit]
                [/then]

                [else]
                    [set_variables]
                        name=temp

                        [literal]
                            {TRAIT_SLOW}
                        [/literal]
                    [/set_variables]

                    [set_variables]
                        name=leaders_to_make_slow[$i].modifications.trait
                        mode=append

                        [insert_tag]
                            name=literal
                            variable=temp.trait
                        [/insert_tag]
                    [/set_variables]

                    {CLEAR_VARIABLE leaders_to_make_slow[$i].max_moves,leaders_to_make_slow[$i].moves,leaders_to_make_slow[$i].max_hitpoints,leaders_to_make_slow[$i].hitpoints}

                    [unstore_unit]
                        variable=leaders_to_make_slow[$i]
                    [/unstore_unit]
                [/else]
            [/if]
        {NEXT i}

        {CLEAR_VARIABLE leaders_to_make_slow,temp}
    [/event]
#enddef
